-- procédure qui affiche le nombre d'adhérents par secte

DROP PROCEDURE IF EXISTS sp_GetAdherentsCountForSect
GO

CREATE PROCEDURE sp_GetAdherentsCountForSect
	AS
	begin
	SELECT Sect.[name], COUNT(Adherent.adherent_id)
	FROM SectAdherent
	INNER JOIN Sect ON Sect.sect_id = SectAdherent.FK_sect_id
	INNER JOIN Adherent ON Adherent.adherent_id = SectAdherent.FK_adherent_id
	GROUP BY Sect.[name]
	end
GO

EXECUTE sp_GetAdherentsCountForSect
GO

-- procédure qui associe chacun des adhérents à chacune des sectes
DROP PROCEDURE IF EXISTS sp_addAdherent
GO

CREATE PROCEDURE sp_addAdherent
AS
DECLARE @SectCursorId INT
DECLARE Sect_Cursor CURSOR SCROLL FOR
	SELECT sect_id FROM Sect
OPEN Sect_Cursor
FETCH FIRST FROM Sect_Cursor INTO @SectCursorId

DECLARE @AdherentCursorId INT
	DECLARE Adherent_Cursor CURSOR SCROLL FOR 
		SELECT adherent_id FROM Adherent
	OPEN Adherent_Cursor
WHILE @@FETCH_STATUS = 0
BEGIN
FETCH FIRST FROM Adherent_Cursor INTO @AdherentCursorId
	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT INTO SectAdherent(FK_sect_id, FK_adherent_id)
		VALUES
		(@SectCursorId, @AdherentCursorId)
		FETCH NEXT FROM Adherent_Cursor INTO @AdherentCursorId
	END
	FETCH NEXT FROM Sect_Cursor INTO @SectCursorId
END
CLOSE Sect_Cursor
CLOSE Adherent_Cursor
DEALLOCATE Sect_Cursor
DEALLOCATE Adherent_Cursor

EXECUTE sp_addAdherent

SELECT Sect.[Name], COUNT(FK_Adherent_id) AS numberAdherent  FROM SectAdherent
INNER JOIN Sect ON Sect.sect_id = SectAdherent.FK_sect_id
GROUP BY Sect.[name]
GO

-- procédure qui retourne le nombre de sectes dans un argument de sortie
